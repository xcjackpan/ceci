program -> BOF statement statements EOF

statements -> statement statements
statements ->

# TODO: Fix test grammar ... should be recursive
statement -> IF LBRAC bexpr RBRAC LCURL statements RCURL elifs
elifs -> ELIF LBRAC bexpr RBRAC LCURL statements RCURL elifs
elifs -> ELSE LCURL statements RCURL
elifs ->

statement -> LOOP LBRAC looprules RBRAC LCURL statements RCURL
looprules -> test
looprules -> decl COMMA test COMMA assignment

statement -> PRINT bexpr

statement -> assignment
assignment -> ID BECOMES bexpr

statement -> BREAK

statement -> RETURN expr

statement -> decl
decl -> LET ID BECOMES bexpr

expr -> FUNC
FUNC -> ID LBRAC params RBRAC

params -> bexpr COMMA params
params ->

func -> func INTO func

# BEXPR is a root Nonterminal that becomes an expr
bexpr -> test bexpr' 
bexpr' -> AND test bexpr'
bexpr' -> OR test bexpr'
bexpr' ->
test -> expr OPS expr
test -> expr
test -> NOT test

expr -> factor expr'
expr' -> PLUS factor expr'
expr' -> MINUS factor expr'
expr' ->

factor -> pow factor'
factor' -> MULT pow factor'
factor' -> DIV pow factor'
factor' ->

pow -> term pow'
pow' -> EXP term pow'
pow' ->

term -> ID
term -> DIGIT
term -> LBRAC bexpr RBRAC
term -> MINUS term
term -> True
term -> False